#! /usr/bin/env python
import os, glob
import Options

def build(bld):
    osg = not bld.all_envs['default']['NO_OSG']

    # librobdyn
    obj = bld.new_task_gen('cxx', 'staticlib')
    obj.source = 'ode/motor.cc \
                  ode/servo.cc \
                  ode/object.cc \
                  ode/environment.cc \
                  ode/environment_hexa.cc\
                  robot/quadruped.cc \
                  robot/hexapod.cc \
                  robot/hybrid.cc' 
	
    obj.includes = '.'
    obj.target = 'robdyn'
    obj.want_libtool = 1
    obj.uselib = 'ODE BOOST EIGEN'

    # viewer
    if osg:
        print 'building with osg'
        obj = bld.new_task_gen('cxx', 'staticlib')
        obj.source = 'renderer/osg_visitor.cc \
                      renderer/osg_hud.cc \
                      renderer/keyboard.cc \
                      renderer/shadows.cc'
        obj.includes = '.'
        obj.target = 'robdyn_osgvisitor'
        obj.want_libtool = 1
	obj.uselib = ' ODE BOOST EIGEN OSG'

        # demo programs are built only if osg is detected
        obj = bld.new_task_gen('cxx', 'program')
        obj.source = "demos/basic.cc"
        obj.includes = '.'
        obj.target = 'basic'
        obj.uselib = ' ODE BOOST EIGEN OSG'
        obj.uselib_local = 'robdyn robdyn_osgvisitor'

        obj = bld.new_task_gen('cxx', 'program')
        obj.source = "demos/test_mx28.cc"
        obj.includes = '.'
        obj.target = 'test_mx28'
        obj.uselib = ' ODE BOOST EIGEN OSG'
        obj.uselib_local = 'robdyn robdyn_osgvisitor'


        obj = bld.new_task_gen('cxx', 'program')
        obj.source = "demos/rescue.cc"
        obj.includes = '.'
        obj.target = 'rescue'
        obj.uselib = 'ODE BOOST EIGEN  OSG'
        obj.uselib_local = 'robdyn robdyn_osgvisitor'


        obj = bld.new_task_gen('cxx', 'program')
        obj.source = "demos/quadruped.cc"
        obj.includes = '.'
        obj.target = 'quadruped'
        obj.uselib = 'ODE BOOST EIGEN OSG'
        obj.uselib_local = 'robdyn robdyn_osgvisitor'

        obj = bld.new_task_gen('cxx', 'program')
        obj.source = "demos/walking.cc"
        obj.includes = '.'
        obj.target = 'walking'
        obj.uselib = 'ODE BOOST EIGEN OSG'
        obj.uselib_local = 'robdyn robdyn_osgvisitor'

        obj = bld.new_task_gen('cxx', 'program')
        obj.source = "demos/hexapod.cc demos/controllerPhase6D.cpp "
        obj.includes = '.'
        obj.target = 'hexapod'
        obj.uselib = 'ODE BOOST EIGEN  OSG'
        obj.uselib_local = 'robdyn robdyn_osgvisitor'

    # install all includes (custom-made)
    import os, glob, types
    p = bld.srcnode.abspath() + '/src/'
    r = glob.glob(p + '*/*.hh') + glob.glob(p + '*.hh')
    for i in r:
        k = os.path.split(i)
        d = os.path.split(k[0])
        if d[0][len(d[0]) - 3:len(d[0])] == "src":
            bld.install_files('${PREFIX}/include/robdyn/' + d[1], i)
        else:
            bld.install_files('${PREFIX}/include/robdyn/', i)
    #libs
    p = bld.srcnode.abspath() + '/bld/default/'
    r = glob.glob(p + '*/*.a')
    for i in r:
        bld.install_files('${PREFIX}/lib/', i)

